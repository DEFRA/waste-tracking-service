parameters:
  - name: environment
    displayName: Environment under test
    default: DEV
    values:
      - DEV
      - TST
      - PRE

  - name: tags
    displayName: Filter expression for Cucumber scenarios
    type: string
    default: 'not @ignore and not @dev_only and not @code_display_issue'

  - name: parallelExecution
    displayName: Execute test suite in parallel?
    type: boolean
    default: true

  - name: numberOfThreads
    displayName: Number of parallel threads (only applicable if test suite is executed in parallel)
    type: number
    default: 6
    values:
      - 2
      - 3
      - 4
      - 6

  - name: dependsOn
    displayName: Acceptance tests job dependencies
    type: object
    default: []

jobs:
  - job: test_${{ parameters.environment }}
    displayName: Acceptance tests ${{ parameters.environment }}
    timeoutInMinutes: 120

    dependsOn: ${{ parameters.dependsOn }}

    variables:
      - group: VG_${{ parameters.environment }}_APPS_PARAMS
      - name: startPageUrl
        value: https://track-waste-${{ lower(parameters.environment) }}.azure.defra.cloud/

    steps:
      - task: UseRubyVersion@0
        inputs:
          versionSpec: '>= 3.0'

      - bash: |
          gem install bundler
          bundle install

          mkdir -p reports/parallel
          mkdir -p junit/$ENVIRONMENT
          mkdir -p junit/$ENVIRONMENT/rerun
          mkdir -p test
          mkdir -p screenshots
          mkdir -p report

          echo "Parallel execution: $PARALLEL_EXECUTION"

          if [ "$PARALLEL_EXECUTION" = "False" ]; then
            echo "Executing acceptance tests on a single thread..."
            bundle exec cucumber \
              --color \
              --tags "$TAGS" \
              --format junit \
              --out junit/$ENVIRONMENT \
              --format pretty \
            || echo "##vso[task.complete result=SucceededWithIssues;]"
          else
            echo "Executing acceptance tests in parallel on $NUMBER_OF_THREADS threads..."
            bundle exec parallel_cucumber \
              --type cucumber \
              -n $NUMBER_OF_THREADS \
              -o ' \
                --strict-undefined \
                --tags "$TAGS"  \
                --format junit \
                --out junit/$ENVIRONMENT \
                --format pretty \
              ' \
              features/
              if [ -f "failed_scenarios.txt" ]; then
                echo "failed scenario file exists"
                echo '####################################'
                echo 'RETRYING THE FAILED SCENARIOS'
                echo 'FAILED SCENARIOS ARE :'
                cat "failed_scenarios.txt"
                echo 'FAILED SCENARIOS COUNT: '
                grep -o -i '.feature:' "failed_scenarios.txt" | wc -l
                bundle exec cucumber \
                --strict-undefined \
                --format junit \
                --out junit/$ENVIRONMENT/rerun \
                --format pretty $(cat "failed_scenarios.txt")                
              else
                echo "No failed scenarios"
              fi || echo "##vso[task.complete result=SucceededWithIssues;]"
          fi
            cp report/screenshot_*.png screenshots/
        displayName: Run tests ${{ parameters.environment }}
        workingDirectory: tests/waste-tracking-service
        env:
          ENVIRONMENT: ${{ parameters.environment }}
          TAGS: ${{ parameters.tags }}
          PARALLEL_EXECUTION: ${{ parameters.parallelExecution }}
          NUMBER_OF_THREADS: ${{ parameters.numberOfThreads }}
          START_PAGE_URL: ${{ variables.startPageUrl }}
          USER_PASSWORD: $(testUserPassword)

      - task: PublishTestResults@2
        displayName: Parallel Test Results ${{ parameters.environment }}
        inputs:
          testResultsFormat: JUnit
          testResultsFiles: tests/waste-tracking-service/junit/${{ parameters.environment }}/*.xml
          testRunTitle: Parallel Test Results on ${{ parameters.environment }}
          publishRunAttachments: true
          mergeTestResults: true
        condition: always()

      - task: PublishTestResults@2
        displayName: Rerun Test Results ${{ parameters.environment }}
        inputs:
          testResultsFormat: JUnit
          testResultsFiles: tests/waste-tracking-service/junit/${{ parameters.environment }}/rerun/*.xml
          testRunTitle: Rerun Tests Results on ${{ parameters.environment }}
          mergeTestResults: true
          failTaskOnFailedTests: false

      - task: PublishBuildArtifacts@1
        displayName: Publish screenshots as artifacts on ${{ parameters.environment }}
        inputs:
          PathtoPublish: tests/waste-tracking-service/screenshots
          ArtifactName: Screenshots on ${{ parameters.environment }}
