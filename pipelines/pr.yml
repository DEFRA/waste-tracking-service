trigger:
  - none

pool: DEFRA-COMMON-ubuntu2004-SSV3

parameters:
  - name: serviceConnection
    type: string
    default: 'AZR-WTS-SSV5'
  - name: containerRegistryName
    type: string
    default: 'SSVWTSINFCR5401'

variables:
  - name: sourceBranch
    value: $[ replace(variables['System.PullRequest.SourceBranch'], 'refs/heads/', 'origin/') ]
  - name: targetBranch
    value: $[ replace(variables['System.PullRequest.TargetBranch'], 'refs/heads/', 'origin/') ]

steps:
  - checkout: self
    fetchDepth: 0

  - bash: npm ci
    name: dependencies
    displayName: Install dependencies

  - template: templates/auth/acr.yaml
    parameters:
      serviceConnection: ${{ parameters.serviceConnection }}
      containerRegistryName: ${{ parameters.containerRegistryName }}

  - task: AzureCLI@2
    name: affectedAppsCheck
    inputs:
      azureSubscription: ${{ parameters.serviceConnection }}
      scriptType: bash
      scriptLocation: inlineScript
      inlineScript: |
        echo "Recreating affected artifacts ${NX_HEAD} -> ${NX_BASE}..."
        affected=$(npx nx show projects --affected --exclude 'api-*,client-*,util-*,govuk-*')
        if [ -n "$affected" ]
        then
          echo "##vso[task.setvariable variable=appsAffectedBool;isOutput=true]true"
          echo "The affected apps are: $affected"
        else
          echo "##vso[task.setvariable variable=appsAffectedBool;isOutput=true]false"
          echo "There are no affected apps in this commit."
        fi
    displayName: Check for affected apps
    env:
      NX_HEAD: $(sourceBranch)
      NX_BASE: $(targetBranch)

  - task: AzureCLI@2
    name: imageTag
    condition: eq(variables['affectedAppsCheck.appsAffectedBool'], true)
    inputs:
      azureSubscription: ${{ parameters.serviceConnection }}
      scriptType: bash
      scriptLocation: inlineScript
      inlineScript: |
        echo "Recreating affected artifacts ${NX_HEAD} -> ${NX_BASE}..."
        affected=$(npx nx show projects --affected --exclude 'api-*,client-*,util-*,govuk-*')
        echo "The affected apps are: ${affected}"
        for project in ${affected}
        do
          echo "Current project from affected is: $project"
          response=$(az acr repository show-tags \
          --repository wts/${project} \
          --orderby time_desc
          )
          echo $response | jq -r .[]
          latest_semantic_version=""
          while IFS= read -r tag; do
              tag=$(echo "$tag" | tr -d '[:space:]')
              tag=${tag//\"/}
              if [[ "$tag" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
                  latest_semantic_version="$tag"
                  break
              fi
          done <<< "$(echo $response | jq -r .[])"
          PROJECT_JSON_PATH="apps/${project}/project.json"
          RAW_TAG_VALUE=$(jq -r '.targets.container.options.metadata.tags[] | select(startswith("type=raw,value="))' "$PROJECT_JSON_PATH")
          RAW_TAG_SEM_VER=$(echo $RAW_TAG_VALUE | cut -d= -f3)
          echo "Parsed tag from project.json: $RAW_TAG_SEM_VER"
          echo "Latest Semantic Version Tag in ACR: $latest_semantic_version"
          if [[ "$RAW_TAG_SEM_VER" == "$latest_semantic_version" ]]; then
            echo "ERROR: You haven't updated the app version to reflect the changes for app $project. Please update the version in the project.json."
            echo "##vso[task.logissue type=error]You haven't updated the app version to reflect the changes for app $project. Please update the version in the project.json."
            exit 1
          fi
        done
    displayName: Check latest image from ACR
    env:
      AZURE_DEFAULTS_ACR: ${{ parameters.containerRegistryName }}
      NX_HEAD: $(sourceBranch)
      NX_BASE: $(targetBranch)

  - bash: |
      if ! npx nx format:check --all; then
        MSG='Some file are improperly formatted. See logs for a list.'
        echo "##vso[task.logissue type=error]$MSG"
        exit 1
      fi
    displayName: Check formatting
    condition: always()

  - bash: |
      if ! npx nx run-many --target=lint --all; then
        MSG='Lint errors found. See logs for a list.'
        echo "##vso[task.logissue type=error]$MSG"
        exit 1
      fi
    displayName: Linting
    condition: always()

  - bash: npx nx run-many --target=test --configuration=ci
    displayName: Unit Tests
    condition: always()

  - task: PublishTestResults@2
    inputs:
      testResultsFormat: JUnit
      testResultsFiles: reports/junit/*.xml
    condition: always()

  - bash: npx nx run-many --target=build
    displayName: Build changed projects
    condition: always()
