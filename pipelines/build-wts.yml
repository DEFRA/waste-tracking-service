trigger:
  - none

pool:
  vmImage: ubuntu-latest

variables:
  BRANCH_NAME: $[replace(variables['Build.SourceBranch'], 'refs/heads/', '')]
  IMAGE_NAME: sndwtshubcr3401.azurecr.io/waste-tracking-service
  RG_NAME: SNDWTSAKSRG2401
  AKS_NAME: SNDWTSSPKKS2401
  ACR_NAME: SNDWTSHUBCR3401
  APP_NAME: waste-tracking-service
  MANIFEST_FILE_PATH: /workloads/waste-tracking-service.yaml

steps:
  - task: AzureCLI@1
    displayName: Login to ACR
    inputs:
      connectedServiceNameARM: 'AZD-WTS-SND1'
      scriptLocation: 'inlineScript'
      inlineScript: |
        az acr login -n $(ACR_NAME)
  - script: |
      npm ci
    displayName: 'npm ci'
  - script: |
      npx nx container $(APP_NAME)
    displayName: 'nx container $(APP_NAME)'
  - script: |
      echo "Tag docker image"
      docker image tag docker.io/wts/$(APP_NAME):$(BRANCH_NAME) $(IMAGE_NAME):$(Build.BuildNumber)
      echo "Push docker image to ACR"
      docker image push $(IMAGE_NAME):$(Build.BuildNumber)
    displayName: Docker list, tag and push
  - powershell: |
      Write-Host "Inputing image name variable into $(MANIFEST_FILE_PATH)"
      ((Get-Content -path $(Build.SourcesDirectory)$(MANIFEST_FILE_PATH) -Raw) -replace "IMAGE_NAME","$(IMAGE_NAME):$(Build.BuildNumber)") | Set-Content -Path $(Build.SourcesDirectory)$(MANIFEST_FILE_PATH)
      Write-Host "Display contents of $(MANIFEST_FILE_PATH)"
      Get-Content -path $(Build.SourcesDirectory)$(MANIFEST_FILE_PATH)
      Write-Host "Inputing app name variable into $(MANIFEST_FILE_PATH)"
      ((Get-Content -path $(Build.SourcesDirectory)$(MANIFEST_FILE_PATH) -Raw) -replace "APP_NAME","$(APP_NAME)") | Set-Content -Path $(Build.SourcesDirectory)$(MANIFEST_FILE_PATH)
      Write-Host "Display contents of $(MANIFEST_FILE_PATH)"
      Get-Content -path $(Build.SourcesDirectory)$(MANIFEST_FILE_PATH)
    displayName: Set Image Name in manifest file
  - task: AzureCLI@1
    displayName: Deploy to AKS
    inputs:
      connectedServiceNameARM: 'AZD-WTS-SND1'
      scriptLocation: 'inlineScript'
      addSpnToEnvironment: true
      inlineScript: |
        echo "Display Service Principal ID:"
        az ad sp show --id $servicePrincipalId --query "id"
        echo "Install AKS CLI"
        sudo az aks install-cli
        echo "Login to AKS"
        az aks get-credentials -n $(AKS_NAME) -g $(RG_NAME)
        export KUBECONFIG=/home/vsts/.kube/config
        kubelogin convert-kubeconfig -l spn
        export AAD_SERVICE_PRINCIPAL_CLIENT_ID=$servicePrincipalId
        export AAD_SERVICE_PRINCIPAL_CLIENT_SECRET=$servicePrincipalKey
        echo "Get AKS Pods"
        kubectl get pods
        echo "Get AKS Nodes"
        kubectl get nodes
        echo "Create App Namespace"
        kubectl create namespace $(APP_NAME)
        echo "Apply manifest file"
        kubectl apply -f $(Build.SourcesDirectory)$(MANIFEST_FILE_PATH)
