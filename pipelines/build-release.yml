trigger:
  - none

pool:
  vmImage: ubuntu-latest

parameters:
  - name: stage
    displayName: 'Environment stage'
    type: string
    values:
      - 'snd'
      - 'dev'
  - name: AppName
    displayName: 'Application Name'
    type: string
    values:
      - 'waste-tracking-service'
      - 'waste-tracking-gateway'

variables:
  - name: serviceConnection
    ${{ if eq(parameters['stage'], 'snd')}}:
      value: AZD-WTS-SND1
    ${{ if eq(parameters['stage'], 'dev')}}:
      value: AZD-WTS-DEV1
  - name: BRANCH_NAME
    value: $[replace(variables['Build.SourceBranch'], 'refs/heads/', '')]
  - name: IMAGE_NAME
    ${{ if and(eq(parameters['AppName'], 'waste-tracking-service') , eq(parameters['stage'], 'snd'))}}:
      value: sndwtshubcr3401.azurecr.io/waste-tracking-service
    ${{ if and(eq(parameters['AppName'], 'waste-tracking-gateway') , eq(parameters['stage'], 'snd'))}}:
      value: sndwtshubcr3401.azurecr.io/waste-tracking-gateway
    ${{ if and(eq(parameters['AppName'], 'waste-tracking-service') , eq(parameters['stage'], 'dev'))}}:
      value: devwtshubcr1401.azurecr.io/waste-tracking-service
    ${{ if and(eq(parameters['AppName'], 'waste-tracking-gateway') , eq(parameters['stage'], 'dev'))}}:
      value: devwtshubcr1401.azurecr.io/waste-tracking-gateway
  - name: RG_NAME
    ${{ if eq(parameters['stage'], 'snd')}}:
      value: SNDWTSAKSRG2401
    ${{ if eq(parameters['stage'], 'dev')}}:
      value: DEVWTSENVRG1401
  - name: AKS_NAME
    ${{ if eq(parameters['stage'], 'snd')}}:
      value: SNDWTSSPKKS2401
    ${{ if eq(parameters['stage'], 'dev')}}:
      value: DEVWTSENVKS1401
  - name: ACR_NAME
    ${{ if eq(parameters['stage'], 'snd')}}:
      value: SNDWTSHUBCR3401
    ${{ if eq(parameters['stage'], 'dev')}}:
      value: DEVWTSHUBCR1401
  - name: MANIFEST_FILE_PATH
    ${{ if eq(parameters['AppName'], 'waste-tracking-service')}}:
      value: /workloads/waste-tracking-service.yaml
    ${{ if eq(parameters['AppName'], 'waste-tracking-gateway')}}:
      value: /workloads/waste-tracking-gateway.yaml

steps:
  - task: AzureCLI@1
    displayName: Login to ACR
    inputs:
      connectedServiceNameARM: '${{ variables.serviceConnection }}'
      scriptLocation: 'inlineScript'
      inlineScript: |
        az acr login -n $(ACR_NAME)
  - script: |
      npm ci
    displayName: 'npm ci'
  - script: |
      npx nx container ${{ parameters.AppName }}
    displayName: 'nx container ${{ parameters.AppName }}'
  - script: |
      echo "Tag docker image"
      docker image tag docker.io/wts/${{ parameters.AppName }}:$(BRANCH_NAME) $(IMAGE_NAME):$(Build.BuildNumber)
      echo "Push docker image to ACR"
      docker image push $(IMAGE_NAME):$(Build.BuildNumber)
    displayName: Docker list, tag and push
  - powershell: |
      Write-Host "Inputing image name variable into $(MANIFEST_FILE_PATH)"
      ((Get-Content -path $(Build.SourcesDirectory)$(MANIFEST_FILE_PATH) -Raw) -replace "IMAGE_NAME","$(IMAGE_NAME):$(Build.BuildNumber)") | Set-Content -Path $(Build.SourcesDirectory)$(MANIFEST_FILE_PATH)
      Write-Host "Display contents of $(MANIFEST_FILE_PATH)"
      Get-Content -path $(Build.SourcesDirectory)$(MANIFEST_FILE_PATH)
      Write-Host "Inputing app name variable into $(MANIFEST_FILE_PATH)"
      ((Get-Content -path $(Build.SourcesDirectory)$(MANIFEST_FILE_PATH) -Raw) -replace "APP_NAME","${{ parameters.AppName }}") | Set-Content -Path $(Build.SourcesDirectory)$(MANIFEST_FILE_PATH)
      Write-Host "Display contents of $(MANIFEST_FILE_PATH)"
      Get-Content -path $(Build.SourcesDirectory)$(MANIFEST_FILE_PATH)
    displayName: Set Image Name in manifest file
  - task: AzureCLI@1
    displayName: Deploy to AKS
    inputs:
      connectedServiceNameARM: '${{ variables.serviceConnection }}'
      scriptLocation: 'inlineScript'
      addSpnToEnvironment: true
      inlineScript: |
        echo "Display Service Principal ID:"
        az ad sp show --id $servicePrincipalId --query "id"
        echo "Install AKS CLI"
        sudo az aks install-cli
        echo "Login to AKS"
        az aks get-credentials -n $(AKS_NAME) -g $(RG_NAME)
        export KUBECONFIG=/home/vsts/.kube/config
        kubelogin convert-kubeconfig -l spn
        export AAD_SERVICE_PRINCIPAL_CLIENT_ID=$servicePrincipalId
        export AAD_SERVICE_PRINCIPAL_CLIENT_SECRET=$servicePrincipalKey
        echo "Get AKS Pods"
        kubectl get pods
        echo "Get AKS Nodes"
        kubectl get nodes
        echo "Create App Namespace"
        kubectl create namespace ${{ parameters.AppName }}
        echo "Apply manifest file"
        kubectl apply -f $(Build.SourcesDirectory)$(MANIFEST_FILE_PATH)
