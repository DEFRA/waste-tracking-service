trigger:
  branches:
    include:
      - main
  paths:
    include:
      - .azure/hub/*
      - .azure/environment/*

pool:
  vmImage: ubuntu-latest

variables:
  # General Variables
  - name: devOpsProject
    value: 'WTS - Waste Tracking Service'
  - name: devOpsOrg
    value: 'defragovuk'
  - name: devOpsOrganizationURL
    value: 'https://dev.azure.com/$(devOpsOrg)/'
  - name: adoRepository
    value: 'waste-tracking-service'
  - name: branchName
    value: 'main'
  # Referencing all ADO Library Variables Groupd per environment where the params and outputs reside
  - group: VG_HUB_PARAMS
  - group: VG_HUB_OUTPUT
  - group: VG_SND_PARAMS
  - group: VG_SND_OUTPUT
  - group: VG_DEV_PARAMS
  - group: VG_DEV_OUTPUT
  #HUB1 is used for testing purposes everywhere >> to be changed per environment after testing has been finished!
  - name: adoPipelineEnvironmentTest
    value: 'HUB1'
  #List all Spoke Environments to be deployed - use ', ' as a seperator
  #For each there should be  Variable Group created in the form - "VG_<ENV>_PARAMS" where <ENV> like SND, DEV, UAT etc.
  - name: spokeEnvironmetsList
    value: SND, DEV

stages:
  #  DEPLOYING INFRASTRUCTURE - HUB
  - stage: DeployHub
    displayName: Deploy Infrastructure - HUB
    jobs:
      - deployment: DeployHub
        displayName: Deploy Infrastructure HUB
        variables:
          # Deployment of HUB resources will ONLY start if the hub's main.bicep has been changed (saved in VG_HUB_PARAMS)
          bicepFile: '$(bicepFilePathHUB)'
          #This variable will be automatically changed to true IF the HUB main.bicep file has been modified in the last commit
          MyFileChanged: 'false'
        environment: '$(adoPipelineEnvironmentTest)' #This enables the option for manual approval of each deployment stage
        strategy:
          runOnce:
            deploy:
              steps:
                # the checkout will enable the use of "git diff" as to see which files have been modified in the latest commit
                - checkout: git://${{ variables.devOpsProject }}/${{ variables.adoRepository }}@refs/heads/${{ variables.branchName }}

                # Getting the names of all files which have been modified in the last commit
                - task: PowerShell@2
                  name: pwsCheckFilesModified
                  displayName: Checking the Files Modified During Last Commit
                  inputs:
                    pwsh: true
                    targetType: 'inline'
                    script: |
                      # getting a list of all changed files seperated by a space
                      $CHANGED_FILES = $(git diff --name-only HEAD^)
                      $MybicepFile = "${{ variables.bicepFile }}"

                      foreach ($fileName in $CHANGED_FILES) {
                        Write-Host "File modified during last commit = $fileName"

                        if ( $MybicepFile.Trim() -like $fileName.Trim() ) {
                          Write-Host "##vso[task.setvariable variable=MyFileChanged]true"
                          Write-Host "##vso[task.complete result=Succeeded;]DONE"
                          Write-Host "$fileName has been changed! The Deployment will be triggered"
                          break
                        }
                      }

                # Actual deployment of the resources - HUB
                - task: AzureResourceManagerTemplateDeployment@3
                  name: ARMTemplateDeploymentHUB
                  displayName: Bicep Deployment Task - HUB
                  condition: eq(variables.MyFileChanged, 'true')
                  inputs:
                    deploymentScope: 'Resource Group'
                    azureResourceManagerConnection: '$(serviceConnectionDEV)'
                    action: 'Create Or Update Resource Group'
                    resourceGroupName: '$(resourceGroupTestingHUB)' #after testing, the RGs from the specific ADO Library VGs to be used instead
                    location: 'uksouth'
                    templateLocation: 'Linked artifact'
                    csmFile: '$(Build.SourcesDirectory)/$(bicepFilePathHUB)'
                    overrideParameters: -environment "$(environmentHUB)" -addressSpace {"virtualNetwork":"$(virtualNetworkAddressSpaceHUB)","subnets":{"data":"$(subnetAddressSpaceDataHUB)","ado":"$(subnetAddressSpaceAdoHUB)"}}
                    deploymentMode: Incremental
                    deploymentOutputs: 'armOutputsHUB'

                - task: AzureCLI@2
                  name: armOutputVariablesSetHUB
                  displayName: Save the ARM deploymentOutputs in Output Variable Group HUB
                  condition: ne(variables.armOutputsHUB, '')
                  env:
                    ARM_OUTPUTS: $(armOutputsHUB)
                  inputs:
                    azureSubscription: '$(subscriptionNameHUB)'
                    scriptType: pscore
                    scriptLocation: inlineScript
                    powerShellErrorActionPreference: stop
                    addSpnToEnvironment: true
                    workingDirectory: '$(Pipeline.Workspace)'
                    inlineScript: |
                      # You need to set the AZURE_DEVOPS_EXT_PAT to $(System.AccessToken) as to get auto login to Azure DevOps without needing to use "az devops login --organization $organization"
                      # System.Accesstoken is a PAT token generated for the service identity "Project Collection Build Service (account)” that needs Administrative access level on the VariableGroup Library as to add variables there
                      $env:AZURE_DEVOPS_EXT_PAT = '$(System.AccessToken)'

                      #General Variables
                      $project = "${{ variables.devOpsProject }}"
                      $groupid = '$(variableGroupIdOutputHUB)'
                      $organization = "${{ variables.devOpsOrganizationURL }}"

                      #Creating an array from all the variables names already in the Variable Group
                      $array_values = az pipelines variable-group variable list --organization $organization  --project $project --group-id $groupid | ConvertFrom-Json
                      Write-Host "array_values: $array_values"
                      $vg_variables = @()
                      foreach ($key in $array_values.psobject.properties.name) {
                        $vg_variables += $key
                       }
                      Write-Host "vg_variables: $vg_variables"

                      $outputsObject = $env:ARM_OUTPUTS | convertfrom-json
                      Write-Host "outputsObject = $outputsObject"
                      $outputsObject.PSObject.Properties | ForEach-Object {
                        $keyname = $_.Name
                        $value = $_.Value.value
                        Write-Host "keyname = $keyname"
                        Write-Host "value = $value"

                        if ($vg_variables -contains $keyname) {
                          Write-Host "vg_variables contains $keyname >> the variale will ONLY be updated"
                          az pipelines variable-group variable update --organization $organization  --project $project --group-id $groupid --name $keyname --value $value
                        }
                        else {
                          Write-Host "vg_variables does NOT contain $keyname >> variable will be created"
                          az pipelines variable-group variable create --organization $organization  --project $project --group-id $groupid --name $keyname --value $value
                        }
                      }

  #  DEPLOYING INFRASTRUCTURE - SPOKE
  - ${{ each environment in split(variables.spokeEnvironmetsList, ', ') }}:
      - stage: DeployEnvironment_${{ environment }}
        displayName: Deploy Infrastructure - ${{ environment }}
        jobs:
          - deployment: DeployInfrastructure_${{ environment }}
            displayName: Deploy Infrastructure - ${{ environment }}
            variables:
              # Deployment of DEV resources will ONLY start if the Spoke's main.bicep has been changed (saved in VG_<ENV>_PARAMS)
              bicepFile: '$(bicepFilePath${{ environment }})'
              # This variable will be automatically changed to true If the Spoke's main.bicep file has been modified in the last commit
              MyFileChanged: 'false'
            environment: '$(adoPipelineEnvironmentTest)' # Must be changed to Spoke specific after the testing period
            strategy:
              runOnce:
                deploy:
                  steps:
                    # the checkout will enable the use of "git diff" as to see which files have been modified in the latest commit
                    - checkout: git://${{ variables.devOpsProject }}/${{ variables.adoRepository }}@refs/heads/${{ variables.branchName }}

                    #Getting the names of all files which have been modified in the last commit
                    - task: PowerShell@2
                      displayName: Checking the Files Modified During Last Commit
                      inputs:
                        targetType: 'inline'
                        pwsh: true
                        script: |
                          # getting all changed files seperated by a space
                            $CHANGED_FILES = $(git diff --name-only HEAD^)
                            $MybicepFile = "${{ variables.bicepFile }}"

                            foreach ($fileName in $CHANGED_FILES) {
                              Write-Host "File modified during last commit = $fileName"

                              if ( $MybicepFile.Trim() -like $fileName.Trim() ) {
                                Write-Host "##vso[task.setvariable variable=MyFileChanged]true"
                                Write-Host "##vso[task.complete result=Succeeded;]DONE"
                                Write-Host "$fileName has been changed! The Deployment will be triggered"
                                break
                              }
                            }

                    - ${{ if eq(variables.MyFileChanged, 'true') }}:
                        - template: template_bicep_deployment_spoke.yml
                          parameters:
                            spokeEnvironment: ${{ environment }}
