trigger:
  - none

jobs:
  - job: bootstrap
    displayName: Bootstrap AKS Cluster

    variables:
      - name: serviceConnection
        value: AZD-WTS-SND1
      - name: containerRegistryName
        value: SNDWTSHUBCR3401
      - name: aksName
        value: SNDWTSSPKKS2401
      - name: resourceGroupName
        value: SNDWTSAKSRG2401
      - name: containerRegistryTaskName
        value: SNDWTSHUBCR3401-SNDWTSACRAT3401

    steps:
      - checkout: self
        fetchDepth: 0

      - template: templates/ci/deploy/login.yaml
        parameters:
          serviceConnection: ${{ variables.serviceConnection }}
          containerRegistryName: ${{ variables.containerRegistryName }}
          aksName: ${{ variables.aksName }}
          resourceGroupName: ${{ variables.resourceGroupName }}

      - bash: |
          echo "Installing Calico API Server"
          kubectl apply -f $MANIFEST_FILE_PATH
        displayName: AKS Restart Deployments
        env:
          AAD_SERVICE_PRINCIPAL_CLIENT_ID: $(spnClientId)
          AAD_SERVICE_PRINCIPAL_CLIENT_SECRET: $(spnClientSecret)
          MANIFEST_FILE_PATH: cluster/system/calico-apiserver.yaml

      - task: AzureCLI@2
        name: acrTask
        displayName: ACR Import Ingress Controller images
        inputs:
          azureSubscription: ${{ variables.serviceConnection }}
          scriptType: bash
          scriptLocation: inlineScript
          inlineScript: |
            az acr task run \
              -n $ACR_IMPORT_TASK_NAME
            response=$(az acr repository list)
            count=$(tr ' ' '\n' <<< "$response" | grep -o '"ingress-nginx/[controller|kube\-webhook\-certgen]' | wc -l)
            if [ "$count" == "2" ]
            then
              echo "##vso[task.setvariable variable=imported;isoutput=true]true"
            else
              echo "##vso[task.setvariable variable=imported;isoutput=true]false"
            fi
        env:
          AZURE_DEFAULTS_ACR: ${{ variables.containerRegistryName }}
          ACR_IMPORT_TASK_NAME: ${{ variables.containerRegistryTaskName }}

      - bash: |
          echo "Installing release: ${HELM_RELEASE_NAME}"
          helmChartName="${HELM_REPO_NAME}/${HELM_RELEASE_NAME}"
          helm repo add $HELM_REPO_NAME $HELM_REPO_URL
          helm repo update
          helm upgrade \
            --install $HELM_RELEASE_NAME \
            $helmChartName \
            --create-namespace \
            -n $HELM_RELEASE_NAMESPACE \
            -f $HELM_VALUES_FILE_PATH
        displayName: AKS Deploy Ingress Controller Helm Chart
        condition: eq(variables['acrTask.imported'], 'true')
        env:
          AAD_SERVICE_PRINCIPAL_CLIENT_ID: $(spnClientId)
          AAD_SERVICE_PRINCIPAL_CLIENT_SECRET: $(spnClientSecret)
          HELM_REPO_NAME: ingress-nginx
          HELM_REPO_URL: https://kubernetes.github.io/ingress-nginx
          HELM_RELEASE_NAME: ingress-nginx
          HELM_RELEASE_NAMESPACE: nginx-system
          HELM_VALUES_FILE_PATH: $(Build.SourcesDirectory)/cluster/system/values-nginx.yaml
